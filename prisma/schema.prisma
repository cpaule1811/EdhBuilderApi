generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int       @id @default(autoincrement())
    username String
    email    String    @unique
    joined   DateTime?
    profile  String?
    hash     String
    rating   Rating[]
    Deck     Deck[]
}

model Deck {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    created     DateTime?
    commanderId Int
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
    commander   Entry     @relation(name: "commander", fields: [commanderId], references: [id])
    partnerId   Int?
    partner     Entry?    @relation(name: "partner", fields: [partnerId], references: [id])
    rating      Rating[]
    Card        Card[]    @relation(name: "cards")
}

model Card {
    id         Int     @id @default(autoincrement())
    quantity   Int
    cardStatus String?
    entry      Entry   @relation(fields: [entryId], references: [id])
    entryId    Int
    deckId     Int?
    Deck       Deck?   @relation(name: "cards", fields: [deckId], references: [id], onDelete: Cascade)

    @@unique([entryId, deckId])
}

model Rating {
    id     Int   @id @default(autoincrement())
    deck   Deck  @relation(fields: [deckId], references: [id])
    deckId Int
    rating Float
    user   User  @relation(fields: [userId], references: [id])
    userId Int

    @@unique([deckId, userId])
}

model Entry {
    id           Int      @id @default(autoincrement())
    cardName     String   @unique
    type         String?
    price        Float?
    cmc          Int?
    modal        String?
    imageUrl     String?
    imageUrl2    String?
    colour       String?
    manaCost     String?
    producedMana String?
    isLegal      Boolean?
    cardArt      String?
    oracleText   String?
    isPartner    Boolean?
    artist       String?
    Card         Card[]
    Partner      Deck[]   @relation(name: "partner")
    Commander    Deck[]   @relation(name: "commander")
}
